[
    {
        "id": "b17fe93b691a0413",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "44844f2c50e92688",
        "type": "group",
        "z": "b17fe93b691a0413",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9e9f9ed59be66946",
            "ea200280c835bfd0",
            "dff09a2202406ad9",
            "567e27731d6728d2",
            "46c2f92aebaa8e2c",
            "b19de87e99cc01ac",
            "ded0195851159c3f",
            "d29bb7bda2ea4036"
        ],
        "x": 14,
        "y": 59,
        "w": 672,
        "h": 122
    },
    {
        "id": "16aa425e74da8cf3",
        "type": "group",
        "z": "b17fe93b691a0413",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "38300efe49248368",
            "a6e5588014f2f5ec",
            "b60e9dd0a5778521",
            "17169d98ce983599",
            "20fcf62bc8eeff66",
            "c4489b4a0ccd98f3",
            "24468a2e680387c0"
        ],
        "x": 14,
        "y": 219,
        "w": 672,
        "h": 122
    },
    {
        "id": "0a4e7ca285d568e3",
        "type": "group",
        "z": "b17fe93b691a0413",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6252f2c56bbfd284",
            "9c3733843947a9ec",
            "3096ab660b883700",
            "c345fdafa2043ab5",
            "7a2f79bafaccf511",
            "efc31d35e11a0508",
            "6ef04d641627307f"
        ],
        "x": 14,
        "y": 379,
        "w": 672,
        "h": 122
    },
    {
        "id": "a6c26e6eb0a7b074",
        "type": "group",
        "z": "b17fe93b691a0413",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8b0d216dd937d6d8",
            "4805de31a89b8934",
            "2f578e49ba213284",
            "02621df4ea75e357",
            "793e61ebd79f56c8",
            "bcf8f61f778fa84d",
            "43cf794d74f6cef2"
        ],
        "x": 14,
        "y": 539,
        "w": 632,
        "h": 122
    },
    {
        "id": "949e4a0305af9a81",
        "type": "group",
        "z": "b17fe93b691a0413",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7f56c12e00d354bd",
            "3afb6e3961350d61",
            "3efe1f2aa9c696d4",
            "6a875458b7fdf6f3",
            "2e0f76c66e9b9f4d",
            "bf6f429fed380419",
            "8bdd34fbc65d3f90"
        ],
        "x": 14,
        "y": 699,
        "w": 612,
        "h": 122
    },
    {
        "id": "a86b0c43737a4956",
        "type": "group",
        "z": "b17fe93b691a0413",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "76a45739ebec1c5e",
            "5a6bc7e0a2904f59",
            "3566780bc7fe54f2",
            "a484ab06f72a413e",
            "fdbe71cca8c1ccda",
            "4c5ee03254f9181b",
            "adea75879adc0ccb"
        ],
        "x": 14,
        "y": 859,
        "w": 632,
        "h": 122
    },
    {
        "id": "9e9f9ed59be66946",
        "type": "mqtt in",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "name": "temp",
        "topic": "capteur/température",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 140,
        "wires": [
            [
                "ea200280c835bfd0"
            ]
        ]
    },
    {
        "id": "ea200280c835bfd0",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "name": "temp fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO mesures (temperature, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 140,
        "wires": [
            [
                "dff09a2202406ad9"
            ]
        ]
    },
    {
        "id": "dff09a2202406ad9",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 450,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "567e27731d6728d2",
        "type": "inject",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne temp timer",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "b19de87e99cc01ac"
            ]
        ]
    },
    {
        "id": "46c2f92aebaa8e2c",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "ded0195851159c3f"
            ]
        ]
    },
    {
        "id": "b19de87e99cc01ac",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "name": "moyenne temp",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(temperature), 2) AS moyenne_temp\n  FROM mesures\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            [
                "46c2f92aebaa8e2c"
            ]
        ]
    },
    {
        "id": "ded0195851159c3f",
        "type": "ui_text",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "group": "5e9bff8d93da06d6",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "température :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 590,
        "y": 100,
        "wires": []
    },
    {
        "id": "38300efe49248368",
        "type": "mqtt in",
        "z": "b17fe93b691a0413",
        "g": "16aa425e74da8cf3",
        "name": "humidite",
        "topic": "capteur/humidite",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "a6e5588014f2f5ec"
            ]
        ]
    },
    {
        "id": "a6e5588014f2f5ec",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "16aa425e74da8cf3",
        "name": "humidite fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO mesures (humidite, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "b60e9dd0a5778521"
            ]
        ]
    },
    {
        "id": "b60e9dd0a5778521",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "16aa425e74da8cf3",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 470,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "17169d98ce983599",
        "type": "inject",
        "z": "b17fe93b691a0413",
        "g": "16aa425e74da8cf3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne humidité timer",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "c4489b4a0ccd98f3"
            ]
        ]
    },
    {
        "id": "20fcf62bc8eeff66",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "16aa425e74da8cf3",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "24468a2e680387c0"
            ]
        ]
    },
    {
        "id": "c4489b4a0ccd98f3",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "16aa425e74da8cf3",
        "name": "moyenne humidite",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(humidite), 2) AS moyenne_humidite\n  FROM mesures\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "20fcf62bc8eeff66"
            ]
        ]
    },
    {
        "id": "24468a2e680387c0",
        "type": "ui_text",
        "z": "b17fe93b691a0413",
        "g": "16aa425e74da8cf3",
        "group": "5e9bff8d93da06d6",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "humidite :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 600,
        "y": 260,
        "wires": []
    },
    {
        "id": "6252f2c56bbfd284",
        "type": "mqtt in",
        "z": "b17fe93b691a0413",
        "g": "0a4e7ca285d568e3",
        "name": "pression",
        "topic": "capteur/pression",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 460,
        "wires": [
            [
                "9c3733843947a9ec"
            ]
        ]
    },
    {
        "id": "9c3733843947a9ec",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "0a4e7ca285d568e3",
        "name": "pression fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO mesures (pression, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 460,
        "wires": [
            [
                "3096ab660b883700"
            ]
        ]
    },
    {
        "id": "3096ab660b883700",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "0a4e7ca285d568e3",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 470,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c345fdafa2043ab5",
        "type": "inject",
        "z": "b17fe93b691a0413",
        "g": "0a4e7ca285d568e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne pression timer",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "efc31d35e11a0508"
            ]
        ]
    },
    {
        "id": "7a2f79bafaccf511",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "0a4e7ca285d568e3",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "6ef04d641627307f"
            ]
        ]
    },
    {
        "id": "efc31d35e11a0508",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "0a4e7ca285d568e3",
        "name": "moyenne pression",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(pression), 2) AS moyenne_pression\n  FROM mesures\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 420,
        "wires": [
            [
                "7a2f79bafaccf511"
            ]
        ]
    },
    {
        "id": "6ef04d641627307f",
        "type": "ui_text",
        "z": "b17fe93b691a0413",
        "g": "0a4e7ca285d568e3",
        "group": "5e9bff8d93da06d6",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "pression :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 600,
        "y": 420,
        "wires": []
    },
    {
        "id": "8b0d216dd937d6d8",
        "type": "mqtt in",
        "z": "b17fe93b691a0413",
        "g": "a6c26e6eb0a7b074",
        "name": "Qair ",
        "topic": "capteur/Qair ",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 620,
        "wires": [
            [
                "4805de31a89b8934"
            ]
        ]
    },
    {
        "id": "4805de31a89b8934",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "a6c26e6eb0a7b074",
        "name": "Qair fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO mesures (co2 , date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 620,
        "wires": [
            [
                "2f578e49ba213284"
            ]
        ]
    },
    {
        "id": "2f578e49ba213284",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "a6c26e6eb0a7b074",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 450,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "02621df4ea75e357",
        "type": "inject",
        "z": "b17fe93b691a0413",
        "g": "a6c26e6eb0a7b074",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne Qair timer",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "bcf8f61f778fa84d"
            ]
        ]
    },
    {
        "id": "793e61ebd79f56c8",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "a6c26e6eb0a7b074",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 450,
        "y": 580,
        "wires": [
            [
                "43cf794d74f6cef2"
            ]
        ]
    },
    {
        "id": "bcf8f61f778fa84d",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "a6c26e6eb0a7b074",
        "name": "moyenne Qair ",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(co2), 2) AS moyenne_co2\n  FROM mesures\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            [
                "793e61ebd79f56c8"
            ]
        ]
    },
    {
        "id": "43cf794d74f6cef2",
        "type": "ui_text",
        "z": "b17fe93b691a0413",
        "g": "a6c26e6eb0a7b074",
        "group": "5e9bff8d93da06d6",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "co2:",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 570,
        "y": 580,
        "wires": []
    },
    {
        "id": "7f56c12e00d354bd",
        "type": "mqtt in",
        "z": "b17fe93b691a0413",
        "g": "949e4a0305af9a81",
        "name": "lux",
        "topic": "capteur/lux",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 780,
        "wires": [
            [
                "3afb6e3961350d61"
            ]
        ]
    },
    {
        "id": "3afb6e3961350d61",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "949e4a0305af9a81",
        "name": "lux fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO mesures (lux, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 780,
        "wires": [
            [
                "3efe1f2aa9c696d4"
            ]
        ]
    },
    {
        "id": "3efe1f2aa9c696d4",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "949e4a0305af9a81",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 430,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "6a875458b7fdf6f3",
        "type": "inject",
        "z": "b17fe93b691a0413",
        "g": "949e4a0305af9a81",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne lux timer",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "bf6f429fed380419"
            ]
        ]
    },
    {
        "id": "2e0f76c66e9b9f4d",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "949e4a0305af9a81",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 430,
        "y": 740,
        "wires": [
            [
                "8bdd34fbc65d3f90"
            ]
        ]
    },
    {
        "id": "bf6f429fed380419",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "949e4a0305af9a81",
        "name": "moyenne lux",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(lux), 2) AS moyenne_lux\n  FROM mesures\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 740,
        "wires": [
            [
                "2e0f76c66e9b9f4d"
            ]
        ]
    },
    {
        "id": "8bdd34fbc65d3f90",
        "type": "ui_text",
        "z": "b17fe93b691a0413",
        "g": "949e4a0305af9a81",
        "group": "5e9bff8d93da06d6",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "lux :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 550,
        "y": 740,
        "wires": []
    },
    {
        "id": "76a45739ebec1c5e",
        "type": "mqtt in",
        "z": "b17fe93b691a0413",
        "g": "a86b0c43737a4956",
        "name": "vent ",
        "topic": "capteur/vent ",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 940,
        "wires": [
            [
                "5a6bc7e0a2904f59"
            ]
        ]
    },
    {
        "id": "5a6bc7e0a2904f59",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "a86b0c43737a4956",
        "name": "vent fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO mesures (vent , date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 940,
        "wires": [
            [
                "3566780bc7fe54f2"
            ]
        ]
    },
    {
        "id": "3566780bc7fe54f2",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "a86b0c43737a4956",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 450,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "a484ab06f72a413e",
        "type": "inject",
        "z": "b17fe93b691a0413",
        "g": "a86b0c43737a4956",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne vent timer",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 900,
        "wires": [
            [
                "4c5ee03254f9181b"
            ]
        ]
    },
    {
        "id": "fdbe71cca8c1ccda",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "g": "a86b0c43737a4956",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 450,
        "y": 900,
        "wires": [
            [
                "adea75879adc0ccb"
            ]
        ]
    },
    {
        "id": "4c5ee03254f9181b",
        "type": "function",
        "z": "b17fe93b691a0413",
        "g": "a86b0c43737a4956",
        "name": "moyenne vent ",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(vent ), 2) AS moyenne_vent \n  FROM mesures\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 900,
        "wires": [
            [
                "fdbe71cca8c1ccda"
            ]
        ]
    },
    {
        "id": "adea75879adc0ccb",
        "type": "ui_text",
        "z": "b17fe93b691a0413",
        "g": "a86b0c43737a4956",
        "group": "5e9bff8d93da06d6",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "vent :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 570,
        "y": 900,
        "wires": []
    },
    {
        "id": "d29bb7bda2ea4036",
        "type": "comment",
        "z": "b17fe93b691a0413",
        "g": "44844f2c50e92688",
        "name": "",
        "info": "c'est trop chiant de duppliquer \nfaudrais que je change \nle hall et lux metre d'ailleurs\n",
        "x": 590,
        "y": 140,
        "wires": []
    },
    {
        "id": "476b80bb655cd66f",
        "type": "ui_button",
        "z": "b17fe93b691a0413",
        "name": "",
        "group": "884da7b7a864ddfb",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "▶️",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "next",
        "payloadType": "str",
        "topic": "▶️",
        "topicType": "msg",
        "x": 990,
        "y": 160,
        "wires": [
            [
                "32f729979dbe2934"
            ]
        ]
    },
    {
        "id": "4488752ea288a7e6",
        "type": "ui_button",
        "z": "b17fe93b691a0413",
        "name": "",
        "group": "884da7b7a864ddfb",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "◀️",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "prev",
        "payloadType": "str",
        "topic": "◀️",
        "topicType": "msg",
        "x": 990,
        "y": 120,
        "wires": [
            [
                "32f729979dbe2934"
            ]
        ]
    },
    {
        "id": "32f729979dbe2934",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 1",
        "func": "let index = flow.get(\"moyenne_index\") || 0;\n\nif (msg.payload === \"next\") {\n  index = (index + 1) % 6;\n} else if (msg.payload === \"prev\") {\n  index = (index - 1 + 6) % 6;\n}\n\nflow.set(\"moyenne_index\", index);\nmsg.payload = index;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 140,
        "wires": [
            [
                "2d52cde35175f6bd"
            ]
        ]
    },
    {
        "id": "2d52cde35175f6bd",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 2",
        "func": "const index = msg.payload;\nconst requetes = [\n  \"SELECT ROUND(AVG(temperature), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(humidite), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(pression), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(co2), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(lux), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(vent), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\"\n];\n\nmsg.topic = requetes[index];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 140,
        "wires": [
            [
                "f6c6172448113d58",
                "83c834d1fae22940"
            ]
        ]
    },
    {
        "id": "f6c6172448113d58",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 1410,
        "y": 140,
        "wires": [
            [
                "42e36a980cf5a6c6",
                "f22feda888b0768e"
            ]
        ]
    },
    {
        "id": "83c834d1fae22940",
        "type": "ui_text",
        "z": "b17fe93b691a0413",
        "group": "884da7b7a864ddfb",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "controle",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1420,
        "y": 80,
        "wires": []
    },
    {
        "id": "42e36a980cf5a6c6",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 3",
        "func": "const types = [\"Température\", \"Humidité\", \"Pression\", \"CO2\", \"Lumière\", \"vent\"];\nlet index = flow.get(\"moyenne_index\") || 0;\nlet valeur = msg.payload[0].value;\n\nmsg.payload = `${types[index]}: ${valeur}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 140,
        "wires": [
            [
                "6dfbcaf2ace8715b"
            ]
        ]
    },
    {
        "id": "6dfbcaf2ace8715b",
        "type": "mqtt out",
        "z": "b17fe93b691a0413",
        "name": "lcd",
        "topic": "lcd/texte",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 1690,
        "y": 140,
        "wires": []
    },
    {
        "id": "040ac3982e4bf135",
        "type": "mqtt out",
        "z": "b17fe93b691a0413",
        "name": "led",
        "topic": "led/indicator",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 1690,
        "y": 200,
        "wires": []
    },
    {
        "id": "f22feda888b0768e",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 5",
        "func": "//const types = [\"Température\", \"Humidité\", \"Pression\", \"CO2\", \"Lumière\", \"vent\"]; pour indication\n\nlet index = flow.get(\"moyenne_index\") || 0;\nlet val = msg.payload[0].value;\n\nconst min = [-10, 0, 950, 400, 0, 0];\nconst max = [40, 100, 1050, 2000, 500, 70];\n\n\n// Clamp la valeur dans les bornes\nconst ratio = Math.min(Math.max((val - min[index]) / (max[index] - min[index]), 0), 1);\n\n// Détermine le nombre de LEDs à allumer (1 à 8)\nconst ledCount = Math.round(ratio * 7) + 1;\n\nconst lux2 = Math.round(255*4*(ratio-ratio**(2)));\nconst lux1 = Math.round(255*ratio-lux2/2) ;\nconst lux3 = Math.round(255*(1-ratio)-lux2/2); \n\nconst co1 = Math.round(255 * (1 - ratio));\nconst co2 =Math.round(255 * ratio);\n\n// Couleur dégradée du rouge (min) au vert (max)\nconst r = [co2, co1, co2, 255, lux1+lux2+lux3/4,co2];\nconst g = [0, co1, co2, co2, lux1/2+lux2+lux3/4,255];\nconst b = [co1, 255, 255, 0, lux2+lux3,co2];\n\n// Génère un tableau de 8 LEDs\nconst leds = [];\nfor (let i = 0; i < 8; i++) {\n    if (i < ledCount) {\n        leds.push([r[index], g[index], b[index]]); // LED allumée\n    } else {\n        leds.push([0, 0, 0]); // LED éteinte\n    }\n}\n\n// Envoi à ESPHome via MQTT\nmsg.topic = \"esp32/barre_led/set\";\nmsg.payload = {\n    effect: \"addressable_lambda\",\n    brightness: 255,\n    color_type: \"rgb\",\n    rgb: leds\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 200,
        "wires": [
            [
                "040ac3982e4bf135"
            ]
        ]
    },
    {
        "id": "21c6d64122a0da62",
        "type": "inject",
        "z": "b17fe93b691a0413",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 140,
        "wires": [
            [
                "4488752ea288a7e6",
                "476b80bb655cd66f",
                "9a7fe63e170d0728"
            ]
        ]
    },
    {
        "id": "275dc4fb225abaa1",
        "type": "mqtt out",
        "z": "b17fe93b691a0413",
        "name": "MQTT Alerte ON",
        "topic": "buzzer/etat",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 2030,
        "y": 260,
        "wires": []
    },
    {
        "id": "5295620bd27effe5",
        "type": "mysql",
        "z": "b17fe93b691a0413",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 1430,
        "y": 280,
        "wires": [
            [
                "0b198779a59e4797"
            ]
        ]
    },
    {
        "id": "9a7fe63e170d0728",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 4",
        "func": "const requetes = [\n  { type: \"Température\",  sql: \"SELECT ROUND(AVG(temperature), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"Humidité\",     sql: \"SELECT ROUND(AVG(humidite), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"Pression\",     sql: \"SELECT ROUND(AVG(pression), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"CO2\",          sql: \"SELECT ROUND(AVG(co2), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"Lumière\",      sql: \"SELECT ROUND(AVG(lux), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"Vent\",         sql: \"SELECT ROUND(AVG(vent), 1) AS value FROM mesures WHERE date >= NOW() - INTERVAL 5 MINUTE\" }\n];\n\n// on ajoute type pour le garder dans chaque msg\nmsg.payload = requetes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 280,
        "wires": [
            [
                "2c5fdff6fc79bb20"
            ]
        ]
    },
    {
        "id": "0b198779a59e4797",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 6",
        "func": "// Liste des seuils\nconst seuils = {\n    \"Température\": 28,\n    \"Humidité\": 60,\n    \"Pression\": 1015,\n    \"CO2\": 1000,\n    \"Lumière\": 40000,\n    \"Vent\": 20\n};\n\n// msg.payload doit être un tableau d'objets comme :\n// [{ type: \"Température\", value: 26.5 }, ...]\n\nlet alerte = false;\n\nfor (let mesure of msg.payload) {\n    const type = mesure.type;\n    const valeur = mesure.value ?? null;\n    const seuil = seuils[type];\n\n    if (valeur !== null && valeur > seuil) {\n        alerte = true;\n        break;  // Dès qu'une alerte est détectée, inutile de continuer\n    }\n}\n\nmsg.payload = alerte;  // true ou false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 280,
        "wires": [
            [
                "f062dacc2fd08c6c"
            ]
        ]
    },
    {
        "id": "2c5fdff6fc79bb20",
        "type": "split",
        "z": "b17fe93b691a0413",
        "name": "split moyenne",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "1d692f89b50c181f"
            ]
        ]
    },
    {
        "id": "1d692f89b50c181f",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 8",
        "func": "msg.topic = msg.payload.sql;\nmsg.type = msg.payload.type;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 280,
        "wires": [
            [
                "5295620bd27effe5"
            ]
        ]
    },
    {
        "id": "5e95f6de10f5531f",
        "type": "mqtt out",
        "z": "b17fe93b691a0413",
        "name": "MQTT Alerte OFF",
        "topic": "buzzer/etat",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 2030,
        "y": 300,
        "wires": []
    },
    {
        "id": "f062dacc2fd08c6c",
        "type": "switch",
        "z": "b17fe93b691a0413",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1700,
        "y": 280,
        "wires": [
            [
                "bb7cb5322e57ea89"
            ],
            [
                "aa4b07c9c3a5edd9"
            ]
        ]
    },
    {
        "id": "bb7cb5322e57ea89",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 7",
        "func": "msg.payload = \"ON\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 260,
        "wires": [
            [
                "275dc4fb225abaa1"
            ]
        ]
    },
    {
        "id": "aa4b07c9c3a5edd9",
        "type": "function",
        "z": "b17fe93b691a0413",
        "name": "function 9",
        "func": "msg.payload = \"OFF\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 300,
        "wires": [
            [
                "5e95f6de10f5531f"
            ]
        ]
    },
    {
        "id": "16f1c4c15983079e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ci-ciad.utbm.fr",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9e13d4612c44da61",
        "type": "MySQLdatabase",
        "name": "BD",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "data",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "5e9bff8d93da06d6",
        "type": "ui_group",
        "name": "data",
        "tab": "d42cef8cb488483e",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "884da7b7a864ddfb",
        "type": "ui_group",
        "name": "screen controle",
        "tab": "d42cef8cb488483e",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d42cef8cb488483e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]