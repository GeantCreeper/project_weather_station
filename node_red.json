[
    {
        "id": "5e2319cafdae2dc2",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "66490e5be2e5c76b",
        "type": "group",
        "z": "5e2319cafdae2dc2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "15cb79d0135bfc53",
            "bccb536998712182",
            "6fceb1822a2637d5",
            "c4a3cae13aacd0db",
            "28ed450dc50a0901"
        ],
        "x": 334,
        "y": 79,
        "w": 512,
        "h": 122
    },
    {
        "id": "bc4767601cd2b386",
        "type": "group",
        "z": "5e2319cafdae2dc2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "df2a9743f1ed472c",
            "128aa01b24310cae",
            "5d378c35c4c27171",
            "ddb02632d26d607c",
            "2785ae4329da0830"
        ],
        "x": 334,
        "y": 239,
        "w": 532,
        "h": 122
    },
    {
        "id": "7f74d5e9e9d60cb3",
        "type": "group",
        "z": "5e2319cafdae2dc2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "09392c9f9eb30207",
            "1320e995f26dd241",
            "5144119374212a3e",
            "b94d939c80f0afe6",
            "a6376f8b91029835"
        ],
        "x": 334,
        "y": 399,
        "w": 532,
        "h": 122
    },
    {
        "id": "dc71acc2b7ba6c2c",
        "type": "group",
        "z": "5e2319cafdae2dc2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e2874571c47101d4",
            "4948f3a829faeb29",
            "82ba761486c6f5f9",
            "65daa40ae44f8a22",
            "a09fb05092122063",
            "4422038fbe97cbeb"
        ],
        "x": 334,
        "y": 559,
        "w": 512,
        "h": 122
    },
    {
        "id": "7040a353186ce2b6",
        "type": "group",
        "z": "5e2319cafdae2dc2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3a0a1a35ca41e689",
            "2bc5cd9b8828be44",
            "50b0e2300c641b33",
            "b41684f2bd4d671e",
            "f90125ad2b167a59",
            "91fb0d57eaa63e84"
        ],
        "x": 334,
        "y": 719,
        "w": 492,
        "h": 122
    },
    {
        "id": "feb221da3d385151",
        "type": "group",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "69c053e5153db793",
            "3d4c20428fcff282",
            "6e8a98a083f8ed47",
            "aa5d3809a5350cd2",
            "582c66ac85586a74",
            "25782ad6b4e2afee"
        ],
        "x": 334,
        "y": 879,
        "w": 512,
        "h": 122
    },
    {
        "id": "15cb79d0135bfc53",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "66490e5be2e5c76b",
        "name": "temp fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO temperature (valeur, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "bccb536998712182"
            ]
        ]
    },
    {
        "id": "bccb536998712182",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "66490e5be2e5c76b",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 770,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6fceb1822a2637d5",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "g": "66490e5be2e5c76b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne temp timer",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "28ed450dc50a0901"
            ]
        ]
    },
    {
        "id": "c4a3cae13aacd0db",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "66490e5be2e5c76b",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "cadfbbd2f1d3de85"
            ]
        ]
    },
    {
        "id": "28ed450dc50a0901",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "66490e5be2e5c76b",
        "name": "moyenne temp",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(valeur), 2) AS moyenne_temp\n  FROM temperature\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "c4a3cae13aacd0db"
            ]
        ]
    },
    {
        "id": "df2a9743f1ed472c",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "bc4767601cd2b386",
        "name": "humidite fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO humidite (valeur, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 320,
        "wires": [
            [
                "128aa01b24310cae"
            ]
        ]
    },
    {
        "id": "128aa01b24310cae",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "bc4767601cd2b386",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 790,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "5d378c35c4c27171",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "g": "bc4767601cd2b386",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne humiditÃ© timer",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 280,
        "wires": [
            [
                "2785ae4329da0830"
            ]
        ]
    },
    {
        "id": "ddb02632d26d607c",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "bc4767601cd2b386",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 790,
        "y": 280,
        "wires": [
            [
                "f8dacc62384583d6"
            ]
        ]
    },
    {
        "id": "2785ae4329da0830",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "bc4767601cd2b386",
        "name": "moyenne humidite",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(valeur), 2) AS moyenne_humidite\n  FROM humidite\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "ddb02632d26d607c"
            ]
        ]
    },
    {
        "id": "09392c9f9eb30207",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "7f74d5e9e9d60cb3",
        "name": "pression fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO pression (valeur, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 480,
        "wires": [
            [
                "1320e995f26dd241"
            ]
        ]
    },
    {
        "id": "1320e995f26dd241",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "7f74d5e9e9d60cb3",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 790,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "5144119374212a3e",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "g": "7f74d5e9e9d60cb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne pression timer",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 440,
        "wires": [
            [
                "a6376f8b91029835"
            ]
        ]
    },
    {
        "id": "b94d939c80f0afe6",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "7f74d5e9e9d60cb3",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 790,
        "y": 440,
        "wires": [
            [
                "9a1e1f14b0a62223"
            ]
        ]
    },
    {
        "id": "a6376f8b91029835",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "7f74d5e9e9d60cb3",
        "name": "moyenne pression",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(valeur), 2) AS moyenne_pression\n  FROM pression\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 440,
        "wires": [
            [
                "b94d939c80f0afe6"
            ]
        ]
    },
    {
        "id": "e2874571c47101d4",
        "type": "mqtt in",
        "z": "5e2319cafdae2dc2",
        "g": "dc71acc2b7ba6c2c",
        "name": "Qair ",
        "topic": "capteur/Qair",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 430,
        "y": 640,
        "wires": [
            [
                "4948f3a829faeb29"
            ]
        ]
    },
    {
        "id": "4948f3a829faeb29",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "dc71acc2b7ba6c2c",
        "name": "Qair fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO co2 (valeur , date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 640,
        "wires": [
            [
                "82ba761486c6f5f9"
            ]
        ]
    },
    {
        "id": "82ba761486c6f5f9",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "dc71acc2b7ba6c2c",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 770,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "65daa40ae44f8a22",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "g": "dc71acc2b7ba6c2c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne Qair timer",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 600,
        "wires": [
            [
                "4422038fbe97cbeb"
            ]
        ]
    },
    {
        "id": "a09fb05092122063",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "dc71acc2b7ba6c2c",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 770,
        "y": 600,
        "wires": [
            [
                "59d751ed871f4f21"
            ]
        ]
    },
    {
        "id": "4422038fbe97cbeb",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "dc71acc2b7ba6c2c",
        "name": "moyenne Qair ",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(valeur), 2) AS moyenne_co2\n  FROM co2\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 600,
        "wires": [
            [
                "a09fb05092122063"
            ]
        ]
    },
    {
        "id": "3a0a1a35ca41e689",
        "type": "mqtt in",
        "z": "5e2319cafdae2dc2",
        "g": "7040a353186ce2b6",
        "name": "lux",
        "topic": "capteur/lux",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 430,
        "y": 800,
        "wires": [
            [
                "2bc5cd9b8828be44"
            ]
        ]
    },
    {
        "id": "2bc5cd9b8828be44",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "7040a353186ce2b6",
        "name": "lux fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO lux (valeur, date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 800,
        "wires": [
            [
                "50b0e2300c641b33"
            ]
        ]
    },
    {
        "id": "50b0e2300c641b33",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "7040a353186ce2b6",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 750,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "b41684f2bd4d671e",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "g": "7040a353186ce2b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne lux timer",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 760,
        "wires": [
            [
                "91fb0d57eaa63e84"
            ]
        ]
    },
    {
        "id": "f90125ad2b167a59",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "7040a353186ce2b6",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 750,
        "y": 760,
        "wires": [
            [
                "1d7caed6273e31c4"
            ]
        ]
    },
    {
        "id": "91fb0d57eaa63e84",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "7040a353186ce2b6",
        "name": "moyenne lux",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(valeur), 2) AS moyenne_lux\n  FROM lux\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 760,
        "wires": [
            [
                "f90125ad2b167a59"
            ]
        ]
    },
    {
        "id": "69c053e5153db793",
        "type": "mqtt in",
        "z": "5e2319cafdae2dc2",
        "g": "feb221da3d385151",
        "name": "vent ",
        "topic": "capteur/vent",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 430,
        "y": 960,
        "wires": [
            [
                "3d4c20428fcff282"
            ]
        ]
    },
    {
        "id": "3d4c20428fcff282",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "feb221da3d385151",
        "name": "vent fonc",
        "func": "let data = JSON.parse(msg.payload);\nmsg.topic = \"INSERT INTO vent (valeur , date) VALUES (?, NOW())\";\nmsg.payload = [data.temp];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 960,
        "wires": [
            [
                "6e8a98a083f8ed47"
            ]
        ]
    },
    {
        "id": "6e8a98a083f8ed47",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "feb221da3d385151",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 770,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "aa5d3809a5350cd2",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "g": "feb221da3d385151",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "moyenne vent timer",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 920,
        "wires": [
            [
                "25782ad6b4e2afee"
            ]
        ]
    },
    {
        "id": "582c66ac85586a74",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "g": "feb221da3d385151",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 770,
        "y": 920,
        "wires": [
            [
                "dfe1a21857b0d18b"
            ]
        ]
    },
    {
        "id": "25782ad6b4e2afee",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "g": "feb221da3d385151",
        "name": "moyenne vent ",
        "func": "msg.topic = `\n  SELECT ROUND(AVG(valeur), 2) AS moyenne_vent \n  FROM vent\n  WHERE date >= NOW() - INTERVAL 5 MINUTE\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 920,
        "wires": [
            [
                "582c66ac85586a74"
            ]
        ]
    },
    {
        "id": "8f88960aa3246369",
        "type": "ui_button",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "group": "884da7b7a864ddfb",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "â¶ï¸",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "next",
        "payloadType": "str",
        "topic": "â¶ï¸",
        "topicType": "msg",
        "x": 1290,
        "y": 180,
        "wires": [
            [
                "49193244547d563d"
            ]
        ]
    },
    {
        "id": "b22a87b41393aa24",
        "type": "ui_button",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "group": "884da7b7a864ddfb",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "âï¸",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "prev",
        "payloadType": "str",
        "topic": "âï¸",
        "topicType": "msg",
        "x": 1290,
        "y": 140,
        "wires": [
            [
                "49193244547d563d"
            ]
        ]
    },
    {
        "id": "49193244547d563d",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 1",
        "func": "let index = flow.get(\"moyenne_index\") || 0;\n\nif (msg.payload === \"next\") {\n  index = (index + 1) % 6;\n} else if (msg.payload === \"prev\") {\n  index = (index - 1 + 6) % 6;\n}\n\nflow.set(\"moyenne_index\", index);\nmsg.payload = index;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 160,
        "wires": [
            [
                "63033a1fd5f05ea5"
            ]
        ]
    },
    {
        "id": "63033a1fd5f05ea5",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 2",
        "func": "const index = msg.payload;\nconst requetes = [\n  \"SELECT ROUND(AVG(valeur), 1) AS value FROM temperature WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(valeur), 1) AS value FROM humidite WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(valeur), 1) AS value FROM pression WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(valeur), 1) AS value FROM co2 WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(valeur), 1) AS value FROM lux WHERE date >= NOW() - INTERVAL 5 MINUTE\",\n  \"SELECT ROUND(AVG(valeur), 1) AS value FROM vent WHERE date >= NOW() - INTERVAL 5 MINUTE\"\n];\n\nmsg.topic = requetes[index];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 160,
        "wires": [
            [
                "e78adaee39cb1c82",
                "3b8487fac53053f2",
                "f5bb38cf51d9aa15",
                "141b4e3396af6abc"
            ]
        ]
    },
    {
        "id": "e78adaee39cb1c82",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 1730,
        "y": 160,
        "wires": [
            [
                "ac5bfb8a05d8f4bd",
                "c8f31ca7fa46af80"
            ]
        ]
    },
    {
        "id": "3b8487fac53053f2",
        "type": "ui_text",
        "z": "5e2319cafdae2dc2",
        "group": "884da7b7a864ddfb",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Control",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1740,
        "y": 220,
        "wires": []
    },
    {
        "id": "ac5bfb8a05d8f4bd",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 3",
        "func": "const types = [\"TempÃ©rature\", \"HumiditÃ©\", \"Pression\", \"CO2\", \"LumiÃ¨re\", \"vent\"];\nlet index = flow.get(\"moyenne_index\") || 0;\nlet valeur = msg.payload[0].value;\n\nmsg.payload = `${types[index]}: ${valeur}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 160,
        "wires": [
            [
                "b96c515ca08324e1"
            ]
        ]
    },
    {
        "id": "b96c515ca08324e1",
        "type": "mqtt out",
        "z": "5e2319cafdae2dc2",
        "name": "lcd",
        "topic": "lcd/texte",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 2050,
        "y": 160,
        "wires": []
    },
    {
        "id": "32aab93be14661f9",
        "type": "mqtt out",
        "z": "5e2319cafdae2dc2",
        "name": "led",
        "topic": "led/indicator",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 2050,
        "y": 220,
        "wires": []
    },
    {
        "id": "c8f31ca7fa46af80",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 5",
        "func": "//const types = [\"TempÃ©rature\", \"HumiditÃ©\", \"Pression\", \"CO2\", \"LumiÃ¨re\", \"vent\"]; pour indication\n\nlet index = flow.get(\"moyenne_index\") || 0;\nlet val = msg.payload[0].value;\n\nconst min = [-10, 0, 950, 400, 0, 0];\nconst max = [40, 100, 1050, 2000, 500, 70];\n\n\n// Clamp la valeur dans les bornes\nconst ratio = Math.min(Math.max((val - min[index]) / (max[index] - min[index]), 0), 1);\n\n// DÃ©termine le nombre de LEDs Ã  allumer (1 Ã  8)\nconst ledCount = Math.round(ratio * 7) + 1;\n\nconst lux2 = Math.round(255*4*(ratio-ratio**(2)));\nconst lux1 = Math.round(255*ratio-lux2/2) ;\nconst lux3 = Math.round(255*(1-ratio)-lux2/2); \n\nconst co1 = Math.round(255 * (1 - ratio));\nconst co2 =Math.round(255 * ratio);\n\n// Couleur dÃ©gradÃ©e du rouge (min) au vert (max)\nconst r = [co2, co1, co2, 255, lux1+lux2+lux3/4,co2];\nconst g = [0, co1, co2, co2, lux1/2+lux2+lux3/4,255];\nconst b = [co1, 255, 255, 0, lux2+lux3,co2];\n\n// GÃ©nÃ¨re un tableau de 8 LEDs\nconst leds = [];\nfor (let i = 0; i < 8; i++) {\n    if (i < ledCount) {\n        leds.push([r[index], g[index], b[index]]); // LED allumÃ©e\n    } else {\n        leds.push([0, 0, 0]); // LED Ã©teinte\n    }\n}\n\n// Envoi Ã  ESPHome via MQTT\nmsg.topic = \"esp32/barre_led/set\";\nmsg.payload = {\n    effect: \"addressable_lambda\",\n    brightness: 255,\n    color_type: \"rgb\",\n    rgb: leds\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 220,
        "wires": [
            [
                "32aab93be14661f9"
            ]
        ]
    },
    {
        "id": "a887843dfd3d663a",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "b22a87b41393aa24",
                "8f88960aa3246369",
                "f1fcfc98f0790bc4"
            ]
        ]
    },
    {
        "id": "804d008dadfed8cb",
        "type": "mqtt out",
        "z": "5e2319cafdae2dc2",
        "name": "MQTT Alerte ON",
        "topic": "buzzer/etat",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 2350,
        "y": 280,
        "wires": []
    },
    {
        "id": "d0b8fc5df0052a55",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 1750,
        "y": 300,
        "wires": [
            [
                "17cca0a768fc5a78"
            ]
        ]
    },
    {
        "id": "f1fcfc98f0790bc4",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 4",
        "func": "const requetes = [\n  { type: \"TempÃ©rature\",  sql: \"SELECT ROUND(AVG(valeur), 1) AS value FROM temperature WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"HumiditÃ©\",     sql: \"SELECT ROUND(AVG(valeur), 1) AS value FROM humidite WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"Pression\",     sql: \"SELECT ROUND(AVG(valeur), 1) AS value FROM pression WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"CO2\",          sql: \"SELECT ROUND(AVG(valeur), 1) AS value FROM co2 WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"LumiÃ¨re\",      sql: \"SELECT ROUND(AVG(valeur), 1) AS value FROM lux WHERE date >= NOW() - INTERVAL 5 MINUTE\" },\n  { type: \"Vent\",         sql: \"SELECT ROUND(AVG(valeur), 1) AS value FROM vent WHERE date >= NOW() - INTERVAL 5 MINUTE\" }\n];\n\n// on ajoute type pour le garder dans chaque msg\nmsg.payload = requetes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "ed69abc7b6be4e98"
            ]
        ]
    },
    {
        "id": "17cca0a768fc5a78",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 6",
        "func": "// Liste des seuils\nconst seuils = {\n    \"TempÃ©rature\": 32,\n    \"HumiditÃ©\": 60,\n    \"Pression\": 1015,\n    \"CO2\": 1000,\n    \"LumiÃ¨re\": 40000,\n    \"Vent\": 20\n};\n\n// msg.payload doit Ãªtre un tableau d'objets comme :\n// [{ type: \"TempÃ©rature\", value: 26.5 }, ...]\n\nlet alerte = false;\n\nfor (let mesure of msg.payload) {\n    const type = mesure.type;\n    const valeur = mesure.value ?? null;\n    const seuil = seuils[type];\n\n    if (valeur !== null && valeur > seuil) {\n        alerte = true;\n        break;  // DÃ¨s qu'une alerte est dÃ©tectÃ©e, inutile de continuer\n    }\n}\n\nmsg.payload = alerte;  // true ou false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 300,
        "wires": [
            [
                "d64e030a4e64b99c"
            ]
        ]
    },
    {
        "id": "ed69abc7b6be4e98",
        "type": "split",
        "z": "5e2319cafdae2dc2",
        "name": "split moyenne",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1460,
        "y": 300,
        "wires": [
            [
                "d082396b8066adc3"
            ]
        ]
    },
    {
        "id": "d082396b8066adc3",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 8",
        "func": "msg.topic = msg.payload.sql;\nmsg.type = msg.payload.type;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 300,
        "wires": [
            [
                "d0b8fc5df0052a55"
            ]
        ]
    },
    {
        "id": "5336613c4a3f9d98",
        "type": "mqtt out",
        "z": "5e2319cafdae2dc2",
        "name": "MQTT Alerte OFF",
        "topic": "buzzer/etat",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "16f1c4c15983079e",
        "x": 2350,
        "y": 320,
        "wires": []
    },
    {
        "id": "d64e030a4e64b99c",
        "type": "switch",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2020,
        "y": 300,
        "wires": [
            [
                "6dae55c8b6509253"
            ],
            [
                "ef747c2557389e55"
            ]
        ]
    },
    {
        "id": "6dae55c8b6509253",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 7",
        "func": "msg.payload = \"ON\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 280,
        "wires": [
            [
                "804d008dadfed8cb"
            ]
        ]
    },
    {
        "id": "ef747c2557389e55",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 9",
        "func": "msg.payload = \"OFF\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 320,
        "wires": [
            [
                "5336613c4a3f9d98"
            ]
        ]
    },
    {
        "id": "8e8aa96723733032",
        "type": "join",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1340,
        "y": 520,
        "wires": [
            [
                "3145e34777a1b67f"
            ]
        ]
    },
    {
        "id": "f8dacc62384583d6",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 12",
        "func": "msg.topic = ['temp', 'hum', 'pressure', 'co2', 'lux', 'wind'][1];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "8e8aa96723733032"
            ]
        ]
    },
    {
        "id": "cadfbbd2f1d3de85",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 13",
        "func": "msg.topic = ['temp', 'hum', 'pressure', 'co2', 'lux', 'wind'][0];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "8e8aa96723733032"
            ]
        ]
    },
    {
        "id": "9a1e1f14b0a62223",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 14",
        "func": "msg.topic = ['temp', 'hum', 'pressure', 'co2', 'lux', 'wind'][2];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 500,
        "wires": [
            [
                "8e8aa96723733032"
            ]
        ]
    },
    {
        "id": "59d751ed871f4f21",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 15",
        "func": "msg.topic = ['temp', 'hum', 'pressure', 'co2', 'lux', 'wind'][3];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "8e8aa96723733032"
            ]
        ]
    },
    {
        "id": "1d7caed6273e31c4",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 16",
        "func": "msg.topic = ['temp', 'hum', 'pressure', 'co2', 'lux', 'wind'][4];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "8e8aa96723733032"
            ]
        ]
    },
    {
        "id": "dfe1a21857b0d18b",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 17",
        "func": "msg.topic = ['temp', 'hum', 'pressure', 'co2', 'lux', 'wind'][5];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 680,
        "wires": [
            [
                "8e8aa96723733032"
            ]
        ]
    },
    {
        "id": "1cc7a94781ef50ab",
        "type": "inject",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 1320,
        "y": 420,
        "wires": [
            [
                "af9bc675332ec089"
            ]
        ]
    },
    {
        "id": "9737266c9cad348f",
        "type": "ui_template",
        "z": "5e2319cafdae2dc2",
        "group": "5e9bff8d93da06d6",
        "name": "",
        "order": 1,
        "width": "40",
        "height": "16",
        "format": "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>MÃ©tÃ©o AnimÃ©e</title>\n  <style>\n    html, body {\n      margin: 0; padding: 0; height: 100%; width: 100%; overflow: hidden;\n      font-family: sans-serif;\n      transition: background 1s ease-in-out;\n      position: relative;\n      background: linear-gradient(to top, #90dffe, #38a3d1);\n    }\n\n    #sky {\n      position: relative;\n      width: 100vw;\n      height: 100vh;\n      background: linear-gradient(to top, #90dffe, #38a3d1);\n      overflow: hidden;\n      transition: background 1s ease-in-out;\n    }\n\n    .sun {\n      position: absolute;\n      top: 10%;\n      left: 50%;\n      transform: translateX(-50%);\n      border-radius: 50%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      color: black;\n      text-shadow: 1px 1px 2px white;\n      font-weight: bold;\n      transition: all 1s ease;\n      z-index: 10;\n      font-size: 1.5em;\n      user-select: none;\n      pointer-events: none;\n      background: orange;\n      box-shadow: 0 0 15px 5px orange;\n      padding: 10px;\n      min-width: 90px;\n      min-height: 90px;\n      line-height: 1.2;\n      text-align: center;\n    }\n\n    .cloud {\n      position: absolute;\n      background: #fff;\n      border-radius: 100px;\n      /* Suppression des box-shadow blancs */\n      transition: opacity 1s, filter 1s;\n      animation: float 2s ease-in-out infinite;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      color: #333;\n      text-align: center;\n      font-weight: bold;\n      will-change: transform;\n      z-index: 15; /* Nuages devant soleil */\n      user-select: none;\n      pointer-events: none;\n      font-size: 1.2em;\n      padding: 10px;\n      min-width: 140px;\n      min-height: 80px;\n      line-height: 1.1;\n      box-sizing: border-box;\n    }\n\n    .cloud::after {\n      content: \"\";\n      position: absolute;\n      bottom: 5px;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 140px;\n      height: 30px;\n      background: rgba(0, 0, 0, 0.25);\n      filter: blur(15px);\n      border-radius: 50%;\n      z-index: 5;  /* sous le nuage */\n      pointer-events: none;\n    }\n\n    @keyframes float {\n      0%, 100% { transform: translateY(0); }\n      50% { transform: translateY(-10px); }\n    }\n\n    .raindrop {\n      position: absolute;\n      width: 4px;\n      height: 15px;\n      background: #3fa9f5;\n      border-radius: 50%;\n      opacity: 0.7;\n      animation: fall linear forwards;\n      pointer-events: none;\n      z-index: 8;\n    }\n\n    @keyframes fall {\n      0% { transform: translateY(0); opacity: 0.7; }\n      100% { transform: translateY(100vh); opacity: 0; }\n    }\n\n    #dataPanel {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      background: rgba(255,255,255,0.8);\n      font-size: 14px;\n      color: #333;\n      padding: 8px 15px;\n      box-sizing: border-box;\n      font-family: monospace;\n      z-index: 20;\n      display: flex;\n      justify-content: space-around;\n      flex-wrap: wrap;\n    }\n\n    #dataPanel div {\n      min-width: 120px;\n      margin: 3px 10px;\n    }\n\n  </style>\n</head>\n<body>\n  <div id=\"sky\">\n    <div id=\"sun\" class=\"sun\">--<br><small>Lux: --</small></div>\n    <div id=\"cloud1\" class=\"cloud\" style=\"top: 30%;\">âï¸<br><small>Hum: --</small></div>\n    <div id=\"cloud2\" class=\"cloud\" style=\"top: 55%;\">âï¸<br><small>Vent: --</small></div>\n  </div>\n\n  <div id=\"dataPanel\">\n    <div id=\"tempData\">TempÃ©rature : --</div>\n    <div id=\"humData\">HumiditÃ© : --</div>\n    <div id=\"pressureData\">Pression : --</div>\n    <div id=\"co2Data\">CO2 : --</div>\n    <div id=\"luxData\">LuminositÃ© : --</div>\n    <div id=\"windData\">Vent : --</div>\n  </div>\n\n  <script>\n    (function(scope) {\n      let rainInterval = null;\n      let lastTimestamp = null;\n\n      const clouds = [\n        {el: document.getElementById('cloud1'), x: 0, width: 0},\n        {el: document.getElementById('cloud2'), x: 0, width: 0}\n      ];\n\n      function initClouds() {\n        clouds.forEach(cloud => {\n          const rect = cloud.el.getBoundingClientRect();\n          cloud.width = rect.width;\n          cloud.x = Math.random() * window.innerWidth;\n          cloud.el.style.left = cloud.x + 'px';\n        });\n      }\n      initClouds();\n\n      function createRaindrop(cloudEl) {\n        const drop = document.createElement(\"div\");\n        drop.className = \"raindrop\";\n\n        const cloudRect = cloudEl.getBoundingClientRect();\n        const left = cloudRect.left + Math.random() * cloudRect.width;\n        const top = cloudRect.bottom;\n\n        drop.style.left = left + \"px\";\n        drop.style.top = top + \"px\";\n\n        drop.style.animationDuration = (Math.random() * 1 + 0.5) + \"s\";\n\n        document.body.appendChild(drop);\n\n        drop.addEventListener('animationend', () => {\n          drop.remove();\n        });\n      }\n\n      function kmhToPxPerSec(kmh) {\n        const coefficient = window.innerWidth / 5000;\n        return kmh * coefficient;\n      }\n\n      function animate(time) {\n        if (!lastTimestamp) lastTimestamp = time;\n        const delta = (time - lastTimestamp) / 1000;\n        lastTimestamp = time;\n\n        clouds.forEach(cloud => {\n          let windSpeed = currentWindVal || 0;\n          const speedPxPerSec = kmhToPxPerSec(windSpeed);\n          cloud.x += speedPxPerSec * delta;\n\n          if (cloud.x > window.innerWidth) {\n            cloud.x = -cloud.width;\n          }\n          cloud.el.style.left = cloud.x + 'px';\n        });\n\n        requestAnimationFrame(animate);\n      }\n\n      let currentWindVal = 0;\n      let currentHumPerc = 0;\n\n      function startRain() {\n        if (!rainInterval) {\n          rainInterval = setInterval(() => {\n            const cloud = clouds[Math.floor(Math.random() * clouds.length)];\n            createRaindrop(cloud.el);\n          }, 150);\n        }\n      }\n      function stopRain() {\n        if (rainInterval) {\n          clearInterval(rainInterval);\n          rainInterval = null;\n        }\n      }\n\n      requestAnimationFrame(animate);\n\n      scope.$watch('msg.payload', function(data) {\n        if (!data) return;\n\n        const tempPerc = Math.min(100, Math.max(0, data.temp));\n        const humPerc = Math.min(100, Math.max(0, data.hum));\n        const pressurePerc = Math.min(100, Math.max(0, data.pressure));\n        const co2Perc = Math.min(100, Math.max(0, data.co2));\n        const luxPerc = Math.min(100, Math.max(0, data.lux));\n        const windPerc = Math.min(100, Math.max(0, data.wind));\n\n        const tempVal = data.tempVal ?? '--';\n        const humVal = data.humVal ?? '--';\n        const pressureVal = data.pressureVal ?? '--';\n        const co2Val = data.co2Val ?? '--';\n        const luxVal = data.luxVal ?? '--';\n        const windVal = data.windVal ?? '--';\n\n        currentWindVal = windVal;\n        currentHumPerc = humPerc;\n\n        // Soleil - taille, couleur et texte\n        const sunSize = 100 + luxPerc * 2;\n        const sun = document.getElementById(\"sun\");\n        sun.style.width = sun.style.height = sunSize + \"px\";\n        sun.innerHTML = `${tempVal}Â°C<br><small>Lux: ${luxVal}</small>`;\n        const hue = 30 + (tempPerc / 100) * 30;\n        sun.style.background = `hsl(${hue}, 100%, 50%)`;\n        sun.style.boxShadow = `0 0 15px 5px hsl(${hue}, 100%, 50%)`;\n        sun.style.color = (tempPerc > 60) ? 'black' : 'black';\n\n        // Mise Ã  jour fond ciel selon heure\n        const h = new Date().getHours();\n        const sky = document.getElementById('sky');\n        switch(true) {\n          case (h >= 6 && h < 12):\n            sky.style.background = 'linear-gradient(to top, #FFD194, #70E1F5)';\n            sun.style.color = 'black';\n            break;\n          case (h >= 12 && h < 18):\n            sky.style.background = 'linear-gradient(to top, #90dffe, #38a3d1)';\n            sun.style.color = 'black';\n            break;\n          case (h >= 18 && h < 21):\n            sky.style.background = 'linear-gradient(to top, #FF5F6D, #FFC371)';\n            sun.style.color = 'white';\n            break;\n          default:\n            sky.style.background = 'linear-gradient(to top, #020111, #3a3a52)';\n            sun.style.color = '#666';\n            break;\n        }\n\n        // Ombre liÃ©e au CO2 avec max 1000 ppm = max assombrissement\n        const co2Max = 1000;\n        const co2Norm = Math.min(co2Val, co2Max) / co2Max;\n        const grayVal = 255 - Math.floor(co2Norm * 200); // entre 255 (clair) et 55 (sombre)\n        if (h < 21 && h >= 6) {\n          document.body.style.background = `linear-gradient(to top, rgb(${grayVal},${grayVal},${grayVal}), #38a3d1)`;\n        } else {\n          document.body.style.background = 'none';\n        }\n\n        // Nuages : opacitÃ©, luminositÃ© (pression entre 950 et 1050), texte humiditÃ© et vent\n        clouds.forEach((cloud, i) => {\n          cloud.el.style.opacity = humPerc / 100;\n          // Pression normalisÃ©e entre 950 et 1050\n          const pressureMin = 950;\n          const pressureMax = 1050;\n          let normalizedPressure = (pressureVal - pressureMin) / (pressureMax - pressureMin);\n          normalizedPressure = Math.min(1, Math.max(0, normalizedPressure));\n          cloud.el.style.filter = `brightness(${0.5 + normalizedPressure / 2})`;\n          if (i === 0) {\n            cloud.el.innerHTML = `âï¸<br><small>Hum: ${humVal}%</small>`;\n          } else {\n            cloud.el.innerHTML = `âï¸<br><small>Vent: ${windVal} km/h</small>`;\n          }\n        });\n\n        // Pluie continue si humiditÃ© > 70%\n        if (humPerc > 70) {\n          startRain();\n        } else {\n          stopRain();\n        }\n\n        // Mise Ã  jour donnÃ©es du panneau\n        document.getElementById('tempData').textContent = `TempÃ©rature : ${tempVal} Â°C`;\n        document.getElementById('humData').textContent = `HumiditÃ© : ${humVal} %`;\n        document.getElementById('pressureData').textContent = `Pression : ${pressureVal} hPa`;\n        document.getElementById('co2Data').textContent = `CO2 : ${co2Val} ppm`;\n        document.getElementById('luxData').textContent = `LuminositÃ© : ${luxVal} lx`;\n        document.getElementById('windData').textContent = `Vent : ${windVal} km/h`;\n      });\n    })(scope);\n  </script>\n</body>\n</html>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1880,
        "y": 520,
        "wires": [
            [
                "33a7ad2568e25277"
            ]
        ]
    },
    {
        "id": "af9bc675332ec089",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 10",
        "func": "let index = context.get(\"index\") || 0;\n\nconst dayData = [\n    // Hour:   T   H   P   C   L   W\n    {temp: 14, hum: 90, pressure : 1000, co2: 300, lux: 100, wind: 5},    // 0 AM\n    {temp: 13, hum: 92, pressure : 990, co2: 280, lux: 100, wind: 6},\n    {temp: 12, hum: 93, pressure : 980, co2: 250, lux: 100, wind: 4},\n    {temp: 12, hum: 94, pressure : 980, co2: 260, lux: 100, wind: 4},\n    {temp: 13, hum: 93, pressure : 980, co2: 280, lux: 500, wind: 5},\n    {temp: 15, hum: 90, pressure : 990, co2: 320, lux: 1500, wind: 7},   // 5 AM\n    {temp: 18, hum: 85, pressure : 1000, co2: 400, lux: 4000, wind: 10},\n    {temp: 22, hum: 70, pressure : 1010, co2: 450, lux: 6000, wind: 12},\n    {temp: 25, hum: 60, pressure : 1010, co2: 500, lux: 8000, wind: 15},\n    {temp: 28, hum: 55, pressure : 1010, co2: 520, lux: 9000, wind: 18},\n    {temp: 30, hum: 50, pressure : 1000, co2: 550, lux: 10000, wind: 20}, // 10 AM\n    {temp: 31, hum: 48, pressure : 990, co2: 600, lux: 9500, wind: 22},\n    {temp: 32, hum: 45, pressure : 980, co2: 650, lux: 9000, wind: 25},\n    {temp: 31, hum: 50, pressure : 980, co2: 680, lux: 8000, wind: 22},\n    {temp: 29, hum: 55, pressure : 990, co2: 600, lux: 7000, wind: 18},\n    {temp: 27, hum: 60, pressure : 1000, co2: 550, lux: 6000, wind: 15},\n    {temp: 25, hum: 65, pressure : 1000, co2: 520, lux: 4000, wind: 12}, // 4 PM\n    {temp: 22, hum: 70, pressure : 1010, co2: 500, lux: 2000, wind: 10},\n    {temp: 20, hum: 75, pressure : 1010, co2: 480, lux: 1000, wind: 8},\n    {temp: 18, hum: 80, pressure : 1000, co2: 450, lux: 500, wind: 6},\n    {temp: 16, hum: 85, pressure : 1000, co2: 400, lux: 200, wind: 5},\n    {temp: 15, hum: 87, pressure : 990, co2: 350, lux: 100, wind: 4},    // 9 PM\n    {temp: 14, hum: 88, pressure : 990, co2: 330, lux: 50, wind: 3},\n    {temp: 14, hum: 90, pressure : 990, co2: 300, lux: 50, wind: 3}\n];\n; // paste the array above here\n\nmsg.payload = dayData[index];\n\n// Advance to next index\nindex = (index + 1) % dayData.length;\ncontext.set(\"index\", index);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 420,
        "wires": [
            [
                "3145e34777a1b67f"
            ]
        ]
    },
    {
        "id": "3145e34777a1b67f",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 11",
        "func": "const min = [-10, 0, 950, 50, 0, 0];\nconst max = [40, 100, 1050, 40000, 500, 70];\nconst names = ['temp', 'hum', 'pressure', 'co2', 'lux', 'wind'];\n\nconst data = msg.payload || {};\nmsg.payload = {};\n\nnames.forEach((name, i) => {\n    const raw = data[name]; // Attention ici : on lit dans msg.payload\n    const minVal = min[i];\n    const maxVal = max[i];\n    const percent = ((raw - minVal) / (maxVal - minVal)) * 100;\n\n    msg.payload[name] = Math.max(0, Math.min(100, +percent.toFixed(1))); // pour affichage visuel\n    msg.payload[`${name}Val`] = raw; // pour l'affichage rÃ©el\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 520,
        "wires": [
            [
                "9737266c9cad348f"
            ]
        ]
    },
    {
        "id": "179f9d49ea65c6b9",
        "type": "mqtt in",
        "z": "5e2319cafdae2dc2",
        "name": "bme280",
        "topic": "capteur/bmp280",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "16f1c4c15983079e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 60,
        "y": 320,
        "wires": [
            [
                "174cbdbc412dfdb3",
                "93bc6436b2b88ead",
                "cd31ee0fb797d34a"
            ]
        ]
    },
    {
        "id": "174cbdbc412dfdb3",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 18",
        "func": "msg.payload=msg.payload[0];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 160,
        "wires": [
            [
                "15cb79d0135bfc53"
            ]
        ]
    },
    {
        "id": "93bc6436b2b88ead",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 20",
        "func": "msg.payload=msg.payload[1];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 320,
        "wires": [
            [
                "df2a9743f1ed472c"
            ]
        ]
    },
    {
        "id": "cd31ee0fb797d34a",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 21",
        "func": "msg.paylode=msg.payload[2];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 480,
        "wires": [
            [
                "09392c9f9eb30207"
            ]
        ]
    },
    {
        "id": "360d2360c794a4aa",
        "type": "mysql",
        "z": "5e2319cafdae2dc2",
        "mydb": "9e13d4612c44da61",
        "name": "",
        "x": 1590,
        "y": 40,
        "wires": [
            [
                "f5bb38cf51d9aa15"
            ]
        ]
    },
    {
        "id": "141b4e3396af6abc",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 19",
        "func": "msg.topic = `\nSELECT\n    h.heure,\n    t.temp_moy,\n    u.hum_moy,\n    c.co2_moy,\n    l.lux_moy,\n    v.wind_moy,\n    p.pression_moy\nFROM (\n    SELECT DATE_FORMAT(date, '%Y-%m-%d %H:00:00') AS heure\n    FROM temperature\n    WHERE date >= NOW() - INTERVAL 7 DAY\n    GROUP BY heure\n) AS h\nLEFT JOIN (\n    SELECT DATE_FORMAT(date, '%Y-%m-%d %H:00:00') AS heure,\n           ROUND(AVG(valeur), 2) AS temp_moy\n    FROM temperature\n    WHERE date >= NOW() - INTERVAL 7 DAY\n    GROUP BY heure\n) AS t USING (heure)\nLEFT JOIN (\n    SELECT DATE_FORMAT(date, '%Y-%m-%d %H:00:00') AS heure,\n           ROUND(AVG(valeur), 2) AS hum_moy\n    FROM humidite\n    WHERE date >= NOW() - INTERVAL 7 DAY\n    GROUP BY heure\n) AS u USING (heure)\nLEFT JOIN (\n    SELECT DATE_FORMAT(date, '%Y-%m-%d %H:00:00') AS heure,\n           ROUND(AVG(valeur), 2) AS co2_moy\n    FROM co2\n    WHERE date >= NOW() - INTERVAL 7 DAY\n    GROUP BY heure\n) AS c USING (heure)\nLEFT JOIN (\n    SELECT DATE_FORMAT(date, '%Y-%m-%d %H:00:00') AS heure,\n           ROUND(AVG(valeur), 2) AS lux_moy\n    FROM lux\n    WHERE date >= NOW() - INTERVAL 7 DAY\n    GROUP BY heure\n) AS l USING (heure)\nLEFT JOIN (\n    SELECT DATE_FORMAT(date, '%Y-%m-%d %H:00:00') AS heure,\n           ROUND(AVG(valeur), 2) AS wind_moy\n    FROM vent\n    WHERE date >= NOW() - INTERVAL 7 DAY\n    GROUP BY heure\n) AS v USING (heure)\nLEFT JOIN (\n    SELECT DATE_FORMAT(date, '%Y-%m-%d %H:00:00') AS heure,\n           ROUND(AVG(valeur), 2) AS pression_moy\n    FROM pression\n    WHERE date >= NOW() - INTERVAL 7 DAY\n    GROUP BY heure\n) AS p USING (heure)\nORDER BY h.heure ASC\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 40,
        "wires": [
            [
                "360d2360c794a4aa"
            ]
        ]
    },
    {
        "id": "b7f71742c410a6f4",
        "type": "function",
        "z": "5e2319cafdae2dc2",
        "name": "function 22",
        "func": "// msg.payload contient un tableau : [index, donnÃ©es]\nlet index = msg.payload[0];\nlet rows = msg.payload[1];\n\nlet labels = [], temp = [], hum = [], co2 = [], lux = [], wind = [], pressure = [];\n\nrows.forEach(row => {\n    labels.push(row.heure);\n    temp.push(row.temp_moy);\n    hum.push(row.hum_moy);\n    co2.push(row.co2_moy);\n    lux.push(row.lux_moy);\n    wind.push(row.wind_moy);\n    pressure.push(row.pression_moy);\n});\n\nlet seriesData = [\n    { series: [\"TempÃ©rature\"], data: [temp], labels: labels },\n    { series: [\"HumiditÃ©\"], data: [hum], labels: labels },\n    { series: [\"CO2\"], data: [co2], labels: labels },\n    { series: [\"LumiÃ¨re\"], data: [lux], labels: labels },\n    { series: [\"Vent\"], data: [wind], labels: labels },\n    { series: [\"Pression\"], data: [pressure], labels: labels }\n];\n\nmsg.payload = [seriesData[index]];\nmsg.topic = seriesData[index].series[0]; // Pour le label dans le graphique\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 40,
        "wires": [
            [
                "b052d13194a5e2c5",
                "f2f099f8eead355c"
            ]
        ]
    },
    {
        "id": "b052d13194a5e2c5",
        "type": "ui_chart",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "group": "884da7b7a864ddfb",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2090,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "33a7ad2568e25277",
        "type": "debug",
        "z": "5e2319cafdae2dc2",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 520,
        "wires": []
    },
    {
        "id": "f5bb38cf51d9aa15",
        "type": "join",
        "z": "5e2319cafdae2dc2",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1760,
        "y": 40,
        "wires": [
            [
                "b7f71742c410a6f4"
            ]
        ]
    },
    {
        "id": "f2f099f8eead355c",
        "type": "debug",
        "z": "5e2319cafdae2dc2",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 100,
        "wires": []
    },
    {
        "id": "9e13d4612c44da61",
        "type": "MySQLdatabase",
        "name": "BD",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "data",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "16f1c4c15983079e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ci-ciad.utbm.fr",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "884da7b7a864ddfb",
        "type": "ui_group",
        "name": "Screen Control",
        "tab": "0c2d5b718af270ac",
        "order": 2,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5e9bff8d93da06d6",
        "type": "ui_group",
        "name": "data",
        "tab": "d42cef8cb488483e",
        "order": 1,
        "disp": false,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0c2d5b718af270ac",
        "type": "ui_tab",
        "name": "Control",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d42cef8cb488483e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]